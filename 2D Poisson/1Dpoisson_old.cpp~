#include <iostream>
#include <fstream>
#include <iomanip>
#include <cmath>
#include <stdlib.h>
#include <TGraph.h>
#include <TCanvas.h>
#include <TAxis.h>

using namespace std;


//Zach Warner
//Proj. IV homework
/*This program solves a 1-Dimensional Poisson Problem with Mixed Boundry conditions for rho(x)=1-2x^2
*/


double pi=atan(1.0)*4.0;
double pi2=atan(1.0)*8.0;
	 
int main()
{

  double test_graph[1000];
  double x_graph[1000];
  double temp_x;
  int N = 1000;
  double temph;
  //constants for boundry conditions
  double alpha_l=1.0;
  double alpha_h=1.0;
  double beta_l=-1.0;
  double beta_h=1.0;
  double gamma_l=1.0;
  double gamma_h=1.0;
  double h=(1.0-0.0)/N; //delta x value (i.e. grid intervals)

  //coefficiens of the tridiagonal linear equation
  double a[N-2]; // N-2 becuase data is from 1 to N-1 and our array starts at 0
  double b[N-2];
  double c[N-2];
  double w[N-2];
  double rho[N-2];

  //coefficeints of recusive relationships
  double xi[N-2];
  double eta[N-2];

  //Poisson solution
  double u[N-2];

  //calculating coefficeints of tridiagonal linear equation
  temph=0;
  for(int i=0; i < N-1; i++)
    {
      rho[i]=1.0-2.0*pow(temph,2);
      temph = temph+h;
    }
      
  a[0]=0.0;
  for(int i=1; i < N-1; i++)
    {
      a[i]=1.0;
    }

  b[0]=-2.0-beta_l/(alpha_l*h-beta_l);
  for(int i=1; i < N-2; i++)
    {
      b[i]=-2.0;
    }
  b[N-2]=-2+beta_h/(alpha_h*h+beta_h);
  
  c[N-2]=0.0;
  for(int i=0; i < N-2; i++)
    {
      c[i]=1.0;
    }

  w[0]=pow(rho[0],2)-(gamma_l*h)/(alpha_l*h-beta_l);
  w[N-2]=pow(rho[N-2],2)-(gamma_h*h)/(alpha_h*h+beta_h);
  for(int i=1;i<N-2;i++)
    {
      w[i]= pow(rho[i],2);
    }  

  //calculating coefficients for recursive relationship
  xi[N-2]=-a[N-2]/b[N-2];
  eta[N-2]=w[N-2]/b[N-2];
  for(int i=N-3; i>0; i--)
    {
      xi[i]=-a[i]/(b[i]+c[i]*xi[i+1]);
      eta[i]=(w[i]-c[i]*eta[i+1])/(b[i]+c[i]*xi[i+1]);
    }
  xi[0]=0.0;
  eta[0]=(w[0]-c[0]*eta[1])/(b[0]+c[0]*xi[1]);

  //caluclating solution to poisson equation
  u[0]=eta[0];
  for(int i=1;i<N-1;i++)
    {
      u[i]=xi[i]*u[i-1]+eta[i];
    }

  
  //loop of annalytical solution for compariosn with solution generated from poison solver
  temp_x=0.0;
  for(int i =0; i<N;i++)
    {
      x_graph[i]=temp_x;
      test_graph[i]=-(1.0/6)*pow(x_graph[i],4)+(1.0/2)*pow(x_graph[i],2)-(2.0/9)*x_graph[i]+(7.0/9);
	temp_x=temp_x+h;
    }


  
 //This section is for graphing

   TGraph *gr1 = new TGraph(N-2,x_graph,u);
   TAxis *axis = gr1->GetXaxis();

   gr1->Draw("AC");//Draws forward historesis loop
   axis->SetLimits(0,1); //x-axis
   gr1->GetHistogram()->SetMaximum(1);//y-axis
   gr1->GetHistogram()->SetMinimum(0);
   gr1->GetXaxis()->SetTitle("w/2pi"); 
   gr1->GetYaxis()->SetTitle("log(P)");
   gr1->GetXaxis()->CenterTitle();
   gr1->GetYaxis()->CenterTitle();
   gr1->SetTitle("Frequency Power Spectrum (Q=1.38)");
   gr1->SetLineColor(4);
   gr1->SetMarkerColor(4);
   gr1->Draw("AC");
    

  return 0;
  
}
